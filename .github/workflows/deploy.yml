name: Deploy

# Security: Explicit permissions for GITHUB_TOKEN
permissions:
  contents: read
  packages: read
  id-token: write
  actions: read

# Concurrency: Prevent multiple deployments for the same target
concurrency:
  group: deploy-${{ inputs.environment }}-${{ github.ref_name }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag to deploy (e.g., latest, main, sha-abc1234, 1.0.0)"
        required: false
        type: string
        default: "latest"
      environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - staging
          - production
  workflow_run:
    workflows:
      - "Build and Push"
    types:
      - completed
    branches:
      - main

run-name: "deploy: ${{ github.event.inputs.environment || 'auto' }} (${{ github.event.inputs.image_tag || github.event.workflow_run.head_branch || 'latest' }}) by @${{ github.actor }}"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web

defaults:
  run:
    shell: bash

jobs:
  verify-and-deploy:
    name: Verify and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      contains('egorovli', github.actor) &&
      (github.event_name == 'workflow_dispatch' || 
       (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'))
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    outputs:
      build_sha: ${{ steps.resolve-tag.outputs.resolved_sha }}
      image_tag: ${{ steps.resolve-tag.outputs.resolved_tag }}
      full_image: ${{ steps.resolve-tag.outputs.full_image }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/web
      IMAGE_TAG: ${{ github.event.inputs.image_tag || github.event.workflow_run.head_branch || 'latest' }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Determine image tag from workflow run
        id: resolve-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # If triggered manually, use the provided tag
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            IMAGE_TAG="${IMAGE_TAG}"
            echo "Using manually specified tag: ${IMAGE_TAG}"
          # If triggered from workflow_run, try to get tag from the build workflow
          elif [[ "${{ github.event_name }}" == "workflow_run" && "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "🔍 Build workflow completed successfully, determining image tag..."
            
            # Get the commit SHA from the build workflow run
            BUILD_SHA="${{ github.event.workflow_run.head_sha }}"
            SHORT_SHA="${BUILD_SHA:0:7}"
            
            # Try to use the SHA tag, or fall back to 'latest' if on main branch
            if [[ "${{ github.event.workflow_run.head_branch }}" == "main" ]]; then
              IMAGE_TAG="latest"
              echo "Using 'latest' tag for main branch"
            else
              IMAGE_TAG="${SHORT_SHA}"
              echo "Using SHA tag: ${IMAGE_TAG}"
            fi
          else
            IMAGE_TAG="latest"
            echo "Defaulting to 'latest' tag"
          fi

          FULL_IMAGE="${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"

          # Resolve tag to commit SHA
          if [[ "${IMAGE_TAG}" =~ ^[0-9a-f]{7,}$ ]]; then
            RESOLVED_SHA="${IMAGE_TAG}"
            echo "✅ Tag is commit SHA: ${RESOLVED_SHA}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            RESOLVED_SHA="${{ github.event.workflow_run.head_sha }}"
            echo "✅ Resolved tag '${IMAGE_TAG}' to commit SHA: ${RESOLVED_SHA}"
          else
            # For manual dispatch, try to find the latest build SHA
            echo "⚠️  Could not resolve SHA for tag ${IMAGE_TAG}, using tag as-is"
            RESOLVED_SHA="${IMAGE_TAG}"
          fi

          echo "resolved_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "resolved_sha=${RESOLVED_SHA}" >> $GITHUB_OUTPUT
          echo "resolved_sha_short=${RESOLVED_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "full_image=${FULL_IMAGE}" >> $GITHUB_OUTPUT

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3.11.1

      - name: Verify image exists in registry
        id: image-check
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}/web
        run: |
          set -euo pipefail

          FULL_IMAGE="${{ steps.resolve-tag.outputs.full_image }}"
          echo "🔍 Verifying image exists in registry..."
          echo "Checking image: ${FULL_IMAGE}"

          # Login to registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login "${REGISTRY}" \
            --username "${{ github.actor }}" \
            --password-stdin

          # Check if image exists using docker manifest inspect
          if docker manifest inspect "${FULL_IMAGE}" > /dev/null 2>&1; then
            echo "✅ Image found: ${FULL_IMAGE}"
            echo "image_exists=true" >> $GITHUB_OUTPUT
            
            # Get image digest for verification
            MANIFEST_JSON=$(docker manifest inspect "${FULL_IMAGE}" 2>/dev/null || echo "")
            if [[ -n "${MANIFEST_JSON}" ]]; then
              if command -v jq >/dev/null 2>&1; then
                IMAGE_DIGEST=$(echo "${MANIFEST_JSON}" | jq -r '.config.digest // empty' 2>/dev/null || echo "")
                if [[ -n "${IMAGE_DIGEST}" && "${IMAGE_DIGEST}" != "null" ]]; then
                  echo "Image digest: ${IMAGE_DIGEST}"
                  echo "image_digest=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT
                fi
              fi
            fi
          else
            echo "❌ Image not found: ${FULL_IMAGE}"
            echo "image_exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Validate deployment parameters
        run: |
          set -euo pipefail

          echo "🔍 Validating deployment parameters..."

          # Validate image tag format
          IMAGE_TAG="${{ steps.resolve-tag.outputs.resolved_tag }}"
          if [[ ! "${IMAGE_TAG}" =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "❌ Invalid image tag format: ${IMAGE_TAG}"
            echo "Tag must contain only alphanumeric characters, dots, underscores, and hyphens"
            exit 1
          fi

          # Validate environment
          ENVIRONMENT="${ENVIRONMENT}"
          if [[ "${ENVIRONMENT}" != "staging" && "${ENVIRONMENT}" != "production" ]]; then
            echo "❌ Invalid environment: ${ENVIRONMENT}"
            echo "Environment must be 'staging' or 'production'"
            exit 1
          fi

          echo "✅ All parameters validated"

      - name: Display deployment parameters
        run: |
          set -euo pipefail

          FULL_IMAGE="${{ steps.resolve-tag.outputs.full_image }}"
          RESOLVED_SHA="${{ steps.resolve-tag.outputs.resolved_sha }}"
          RESOLVED_SHA_SHORT="${{ steps.resolve-tag.outputs.resolved_sha_short }}"
          IMAGE_TAG="${{ steps.resolve-tag.outputs.resolved_tag }}"
          IMAGE_DIGEST="${{ steps.image-check.outputs.image_digest }}"

          echo "## Deployment Parameters" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** \`${REGISTRY}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Name:** \`${IMAGE_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`${IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${RESOLVED_SHA}" ]]; then
            echo "- **Resolved SHA:** \`${RESOLVED_SHA_SHORT}\` (${RESOLVED_SHA})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Full Image:** \`${FULL_IMAGE}\`" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${IMAGE_DIGEST}" ]]; then
            echo "- **Image Digest:** \`${IMAGE_DIGEST}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** \`${ENVIRONMENT}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered By:** \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "- **Build Workflow Run:** \`${{ github.event.workflow_run.id }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Commit SHA:** \`${{ github.event.workflow_run.head_sha }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 DEPLOYMENT PARAMETERS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Image Information:"
          echo "  Registry:        ${REGISTRY}"
          echo "  Image Name:      ${IMAGE_NAME}"
          echo "  Image Tag:       ${IMAGE_TAG}"
          if [[ -n "${RESOLVED_SHA}" ]]; then
            echo "  Resolved SHA:    ${RESOLVED_SHA_SHORT} (${RESOLVED_SHA})"
          fi
          echo "  Full Image:      ${FULL_IMAGE}"
          if [[ -n "${IMAGE_DIGEST}" ]]; then
            echo "  Image Digest:    ${IMAGE_DIGEST}"
          fi
          echo ""
          echo "Deployment Configuration:"
          echo "  Environment:     ${ENVIRONMENT}"
          echo "  Triggered By:    ${{ github.actor }}"
          echo "  Branch:          ${{ github.ref_name }}"
          echo "  Commit SHA:      ${{ github.sha }}"
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "  Build Run ID:    ${{ github.event.workflow_run.id }}"
            echo "  Build SHA:       ${{ github.event.workflow_run.head_sha }}"
          fi
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Execute deployment stub
        if: steps.image-check.outputs.image_exists == 'true'
        env:
          FULL_IMAGE: ${{ steps.resolve-tag.outputs.full_image }}
          IMAGE_TAG: ${{ steps.resolve-tag.outputs.resolved_tag }}
          RESOLVED_SHA: ${{ steps.resolve-tag.outputs.resolved_sha }}
          RESOLVED_SHA_SHORT: ${{ steps.resolve-tag.outputs.resolved_sha_short }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: |
          set -euo pipefail

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 DEPLOYMENT STUB"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Current implementation is a stub."
          echo "Replace this step with actual deployment logic:"
          echo ""
          echo "Available environment variables:"
          echo "  FULL_IMAGE=${FULL_IMAGE}"
          echo "  IMAGE_TAG=${IMAGE_TAG}"
          echo "  RESOLVED_SHA=${RESOLVED_SHA}"
          echo "  RESOLVED_SHA_SHORT=${RESOLVED_SHA_SHORT}"
          echo "  ENVIRONMENT=${ENVIRONMENT}"
          echo ""
          echo "Environment-specific secrets are available via:"
          echo "  \${{ secrets.* }}"
          echo ""
          echo "  # Example SSH + Docker:"
          echo "  ssh deploy@target 'docker pull ${FULL_IMAGE} && docker-compose up -d'"
          echo ""
          echo "  # Example Kubernetes:"
          echo "  kubectl set image deployment/app app=${FULL_IMAGE} -n ${ENVIRONMENT}"
          echo ""
          echo "  # Example Helm:"
          echo "  helm upgrade app ./chart --set image.tag=${IMAGE_TAG} -n ${ENVIRONMENT}"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Deployment stub completed"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
